spring.application.name=cloud-kafka-sample
spring.cloud.function.definition=receive
spring.kafka.producer.properties.linger.ms=50

#Consumer
spring.cloud.stream.kafka.default.consumer.application-id=${spring.application.name}

spring.cloud.stream.bindings.receive-in-0.destination=input-topic
spring.cloud.stream.bindings.receive-in-0.group=inputGroup
spring.cloud.stream.bindings.receive-in-0.consumer.batch-mode=true

#spring.cloud.stream.kafka.binder.brokers=localhost:9092
# Forces consumer to wait 5 seconds before polling for messages
spring.cloud.stream.kafka.bindings.receive-in-0.consumer.configuration.fetch.max.wait.ms=5000
spring.cloud.stream.kafka.bindings.receive-in-0.consumer.configuration.fetch.min.bytes=1000000000
spring.cloud.stream.kafka.bindings.receive-in-0.consumer.configuration.max.poll.records=10000000

spring.cloud.stream.kafka.bindings.receive-in-0.consumer.enableDlq=true
spring.cloud.stream.kafka.bindings.receive-in-0.consumer.dlqPartitions=1
spring.cloud.stream.kafka.bindings.receive-in-0.consumer.dlqName=input-topic-dlq
spring.cloud.stream.kafka.bindings.receive-in-0.consumer.dlqProducerProperties.configuration.value.serializer=org.apache.kafka.common.serialization.StringSerializer

#Producer
spring.cloud.stream.bindings.receive-out-0.destination=input-topic

#final destination after retry failure
spring.cloud.stream.bindings.parkingLot.destination=parkingLot

spring.cloud.stream.kafka.binder.configuration.auto.offset.reset=earliest
spring.cloud.stream.kafka.binder.headers=x-retries
spring.threads.virtual.enabled=true